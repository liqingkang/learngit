一、安装配置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

二、创建版本库

1、创建一个工作目录并进入
$ mkdir learngit
$ cd learngit
$ pwd

2、将创建目录变为git可管理的仓库
$ git init

创建成功会多一个.git目录（如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。）

3、添加文件到仓库
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

文件最好用utf-8编码。

三、基本操作

1、查看仓库状态
$ git status

2、查看修改内容
$ git diff readme.txt 

3、查看历史记录
$ git log
$ git log -number
查看最新number条

如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
$ git log --pretty=oneline

四、版本回退

1、版本回退
$ git reset --hard HEAD^
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

$ git reset --hard 3628164
回退到某个版本号（版本号不用输全，前面一段即可）

2、查看历史命令
git reflog
当回退到历史版本，想回来忘记了版本号。可以用这个。

五、工作区和暂存区

1、工作区
电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。

2、版本库
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
里面有三个概念：
	1）暂存区（stage)
	2）分支
	3）HEAD
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

六、管理修改

1、如果：修改1->add->修改2->commit
提交的是修改1，修改2并不会被提交。也就是：
每次commit的会把缓存区的提交。
每次修改，如果不add到暂存区，那就不会加入到commit中。

2、工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt 

七、撤销修改

1、丢弃工作区修改

a）还没有add到缓存区
$ git checkout -- readme.txt
若缓存区有，工作区变为缓存区内容。否则变为版本库里的最新文件。

b）已经add到缓存区了
	1）清空缓存区，不会影响工作区。
	$ git reset HEAD readme.txt
	2）现在回到了情况a)，用情况a)的方法解决。
	
八、删除文件

$ git rm test.txt
$ git commit -m "remove test.txt"
同样可以使用和修改一样的撤销操作等等。

九、远程仓库（在github上，当然也可以自己搭建）

1、创建SSHkey
$ ssh-keygen -t rsa -C "youremail@example.com"

可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对。
id_rsa是私钥，不能泄露出去。
id_rsa.pub是公钥，可以放心地告诉任何人。

2、在github上创建仓库，并且添加生成的SSH Key密钥

3、把本地仓库关联GitHub仓库
$ git remote add origin git@github.com:liqingkang/learngit.git
origin是远程库的名字。
git@github.com:liqingkang/learngit.git是地址GitHub上有的，Http的也有。

4、本地库的所有内容推送到远程库上
$ git push -u origin master
分支master推送到远程，第一次使用-u。以后可以省略。

5、从远程库克隆到本地库
$ git clone git@github.com:michaelliao/gitskills.git

十、分支管理

1、创建与切换分支
1）方法一
$ git checkout -b dev
创建并切换分支，相当于一下两条。
2）方法二
$ git branch dev
$ git checkout dev
都为从当前分支，创建一个分支。

2）查看分支
$ git branch

2、合并分支
$ git merge dev
将dev分支合并到当前分支

3、删除分支
$ git branch -d dev

4、解决冲突
当合并分支时，有冲突会提醒。然后再去修改文件。重新提交即可。

5、分支管理策略
1）加上--no-ff参数
$ git merge --no-ff -m "merge with no-ff" dev
$ git merge --no-ff dev
加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

2）查看合并图
$ git log --graph --pretty=oneline --abbrev-commit

十一、Bug分支

当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
1、储藏现场
$ git stash

2、查看储藏起来的现场（可能有多个）
$ git stash list

2、恢复现场
1）方法一
git stash apply（恢复后，stash内容并不删除）
所以需要：
git stash drop

当有多个的时候
$ git stash apply stash@{0}

2）方法二
$ git stash pop

十二、多人协作

1、查看远程库信息
$ git remote
显示更详细信息
git remote -v

2、推送分支
$ git push origin master
$ git push origin dev
将当前分支推送到远程对应分支

3、抓取分支
1）创建远程分支到本地
$ git checkout -b dev origin/dev

2）设置本地分支与远程分支的连接
$ git branch --set-upstream-to origin/dev
或者
$ git branch -u origin/dev

3)获取远程分支
$ git pull
如果有冲突，会有提醒。

十三、标签管理

1、创建标签
1）切换到打标签的分支上

2）打上一个标签
$ git tag v1.0

3）查看所有标签
$ git tag

4）根据版本号打标签
$ git tag v0.9 6224937（标签ID）

5）查看标签信息
$ git show v1.0

6）创建带说明的标签
$ git tag -a v0.1 -m "version 0.1 released" 3628164
用-a指定标签名，-m指定说明文字

7）-s用私钥签名一个标签
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a

2、标签管理
1）删除一个标签
$ git tag -d v0.1

2）上传一个标签
$ git push origin v1.0

3）一次性推送未推送标签
$ git push origin --tags

4）删除一个远程标签
a）先删除本地标签
b）$ git push origin :refs/tags/v1.0

十四、忽略特殊文件

当把某些文件放到Git工作目录中，但又不想或者不能提交它们。这时候就可以用啦。
1、在Git工作区的根目录下创建一个特殊的.gitignore文件

2、在里面填写想要忽略的文件即可

3、这里有大量GitHub已经为我们准备了各种配置文件
https://github.com/github/gitignore

4、把.gitignore也提交到Git。这样也可以对.gitignore进行版本管理啦。

十五、配置别名

1、给命令改个名字
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
co就表示checkout。同理.....

--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

2、一个好用的log别名
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

3、每个仓库的Git配置文件都放在.git/config文件中

4、前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
要对当前用户都起左右记得加--global咯

十六、搭建Git服务器

通常在Linux上搭建。
1、在Linux创建一个新用户用来管理Git
$ adduser gitadmin

2、创建证书登录
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

3、初始化Git仓库
首先进入仓库的目录，然后
$ git init --bare sample.git
--bare表示创建一个裸仓库。裸仓库没有工作区。
因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区。
服务器上的Git仓库通常都以.git结尾

4、把owner改为gitadmin
$ chown -R gitadmin:gitadmin sample.git

5、禁用shell登录
gitadmin用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

gitadmin用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

6、克隆远程仓库
$ git clone git@server:/srv/sample.git
